///////////////////////////////////////////////////////////////////////////////
//
//	PURPOSE
//		Windows Forms test dialog for WintabDN
//
//	COPYRIGHT
//		Copyright (c) 2010-2020 Wacom Co., Ltd.
//
//		The text and information contained in this file may be freely used,
//		copied, or distributed without compensation or licensing restrictions.
//
///////////////////////////////////////////////////////////////////////////////
using System;
using System.Windows.Forms;

namespace WintabDN
{
	public partial class QueryDataForm : Form
	{
		private CWintabContext m_logContext = null;
		private CWintabData m_wtData = null;

		UInt32 m_maxPackets = 10;
		const bool REMOVE = true;

		public QueryDataForm()
		{
			InitializeComponent();
			this.FormClosing += QueryDataForm_FormClosing;
			try
			{
				// Open a Wintab context that does not send Wintab data events.
				m_logContext = OpenQueryDigitizerContext();

				// Create a data object.
				m_wtData = new CWintabData(m_logContext);

				m_wtData.SetWTPacketEventHandler(MyWTPacketEventHandler);
			}
			catch (Exception ex)
			{
				MessageBox.Show(ex.ToString());
			}
		}

		///////////////////////////////////////////////////////////////////////

		private CWintabContext OpenQueryDigitizerContext()
		{
			bool status = false;
			CWintabContext logContext = null;

			try
			{
				// Get the default digitizing context.  Turn off events.  Control system cursor.
				logContext = CWintabInfo.GetDefaultDigitizingContext(ECTXOptionValues.CXO_SYSTEM);

				logContext.Options |= (uint)ECTXOptionValues.CXO_MESSAGES;
				logContext.Options &= ~(uint)ECTXOptionValues.CXO_SYSTEM;

				if (logContext == null)
				{
					TraceMsg("OpenQueryDigitizerContext: FAILED to get default digitizing context.\n");
					//System.Diagnostics.Debug.WriteLine("FAILED to get default digitizing context.");
					return null;
				}

				// Modify the digitizing region.
				logContext.Name = "WintabDN Query Data Context";
				logContext.SysOrgX = logContext.SysOrgY = 0;
				logContext.SysExtX = SystemInformation.PrimaryMonitorSize.Width;
				logContext.SysExtY = SystemInformation.PrimaryMonitorSize.Height;

				// Open the context, which will also tell Wintab to send data packets.
				status = logContext.Open();

				TraceMsg("Context Open: " + (status ? "PASSED [ctx=" + logContext.HCtx + "]" : "FAILED") + "\n");
				//System.Diagnostics.Debug.WriteLine("Context Open: " + (status ? "PASSED [ctx=" + logContext.HCtx + "]" : "FAILED"));
			}
			catch (Exception ex)
			{
				TraceMsg("OpenQueryDigitizerContext: ERROR : " + ex.ToString());
			}

			return logContext;
		}

		///////////////////////////////////////////////////////////////////////

		public void MyWTPacketEventHandler(Object sender_I, MessageReceivedEventArgs eventArgs_I)
		{
			UInt32 numPkts = 0;

			if (m_wtData == null)
			{
				return;
			}

			bool removeData = this.removeRadioButton.Checked;

			try
			{
				// If removeData is true, packets are removed as they are read.
				// If removeData is false, peek at packets only (packets flushed below).
				WintabPacket[] packets = m_wtData.GetDataPackets(m_maxPackets, removeData, ref numPkts);

				if (numPkts > 0)
				{
					for (int idx = 0; idx < packets.Length; idx++)
					{
						TraceMsg(
							"Context:" + packets[idx].pkContext +
							" Status:" + packets[idx].pkStatus +
							" ID:" + packets[idx].pkSerialNumber +
							" X:" + packets[idx].pkX +
							" Y:" + packets[idx].pkY +
							" P:" + packets[idx].pkNormalPressure + "\n");
					}

					// If the peek button was pressed, then flush the packets we just peeked at.
					if (!removeData)
					{
						TraceMsg("Flushing " + numPkts.ToString() + " pending data packets...\n\n");
						m_wtData.FlushDataPackets(numPkts);
					}
				}
			}
			catch (Exception ex)
			{
				MessageBox.Show("MyWTPacketEventHandler ERROR: " + ex.ToString());
			}
		}

		///////////////////////////////////////////////////////////////////////

		private void QueryDataForm_FormClosing(object sender, System.ComponentModel.CancelEventArgs e)
		{
			try
			{
				TraceMsg("QueryDataForm - Closing context...\n");
				if (m_wtData != null)
				{
					m_wtData.RemoveWTPacketEventHandler(MyWTPacketEventHandler);
					m_wtData = null;
				}
				if (m_logContext != null)
				{
					m_logContext.Close();
					m_logContext = null;
				}

			}
			catch (Exception ex)
			{
				System.Windows.Forms.MessageBox.Show(ex.ToString());
			}
		}

		///////////////////////////////////////////////////////////////////////

		private void clearButton_Click(object sender, EventArgs e)
		{
			testTextBox.Clear();
		}

		///////////////////////////////////////////////////////////////////////

		void TraceMsg(string msg)
		{
			testTextBox.AppendText(msg);

			// Scroll to bottom of list.
			testTextBox.SelectionLength = 0;
			testTextBox.SelectionStart = testTextBox.Text.Length;
			testTextBox.ScrollToCaret();

			testTextBox.Update();
		}
	}
}
