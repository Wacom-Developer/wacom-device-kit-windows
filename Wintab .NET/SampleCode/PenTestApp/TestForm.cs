///////////////////////////////////////////////////////////////////////////////
//
//	PURPOSE
//		Windows Forms test dialog for WintabDN
//
//	COPYRIGHT
//		Copyright (c) 2010-2020 Wacom Co., Ltd.
//
//		The text and information contained in this file may be freely used,
//		copied, or distributed without compensation or licensing restrictions.
//
///////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;
using WintabDN;

namespace FormTestApp
{
	public partial class TestForm : Form
	{
		private CWintabContext m_logContext = null;
		private CWintabData m_wtData = null;
		private UInt32 m_maxPkts = 1;   // max num pkts to capture/display at a time

		private Int32 m_pkX = 0;
		private Int32 m_pkY = 0;
		private UInt32 m_pressure = 0;
		private UInt32 m_pkTime = 0;
		private UInt32 m_pkTimeLast = 0;

		private Point m_lastPoint = Point.Empty;
		private Graphics m_graphics;
		private Pen m_pen;
		private Pen m_backPen;

		private List<Pen> m_drawPens = new List<Pen>();

		private Int32 m_maxPressure = CWintabInfo.GetMaxPressure();

		// These constants can be used to force Wintab X/Y data to map into a
		// a 10000 x 10000 grid, as an example of mapping tablet data to values
		// that make sense for your application.
		private const Int32 m_TABEXTX = 10000;
		private const Int32 m_TABEXTY = 10000;

		private bool m_showingTextButton = true;

		///////////////////////////////////////////////////////////////////////

		public TestForm()
		{
			InitializeComponent();

			this.FormClosing += new FormClosingEventHandler(TestForm_FormClosing);
		}

		///////////////////////////////////////////////////////////////////////

		public HCTX HLogContext { get { return m_logContext.HCtx; } }

		///////////////////////////////////////////////////////////////////////

		private void TestForm_FormClosing(Object sender, FormClosingEventArgs e)
		{
			CloseCurrentContext();
		}

		///////////////////////////////////////////////////////////////////////

		private void testButton_Click(object sender, EventArgs e)
		{
			// Close whatever context is open.
			CloseCurrentContext();

			if (m_showingTextButton)
			{
				// Clear display and shut off scribble if it's on.
				ClearDisplay();
				Enable_Scribble(false);

				// Set up to STOP the next time button is pushed.
				testButton.Text = "STOP";
				testButton.BackColor = Color.Orange;
				testLabel.Text = "Press STOP button to stop testing. (May take a few seconds to stop.)";
				m_showingTextButton = false;

				// Run the tests
				Test_IsWintabAvailable();
				Test_GetDeviceInfo();
				Test_GetDefaultDigitizingContext();
				Test_GetDefaultSystemContext();
				Test_GetDefaultDeviceIndex();
				Test_GetDeviceAxis();
				Test_GetDeviceOrientation();
				Test_GetDeviceRotation();
				Test_GetNumberOfDevices();
				Test_IsStylusActive();
				Test_GetStylusName();
				Test_GetExtensionMask();
				Test_Context();
				Test_DataPacketQueueSize();
				Test_MaxPressure();
				Test_GetDataPackets(1);
				Test_QueryDataPackets();     // opens up another form
			}
			else
			{
				testButton.Text = "Test...";
				testButton.BackColor = Color.Lime;
				testLabel.Text = "Press Test... button to start testing.";
				m_showingTextButton = true;

				CloseCurrentContext();
			}
		}

		///////////////////////////////////////////////////////////////////////

		private void scribbleButton_Click(object sender, EventArgs e)
		{
			ClearDisplay();
			Enable_Scribble(true);

			// Control the system cursor with the pen.
			// TODO: set to false to NOT control the system cursor with pen.
			bool controlSystemCursor = true;

			// Open a context and try to capture pen data;
			InitSystemDataCapture(controlSystemCursor);
		}

		///////////////////////////////////////////////////////////////////////

		private void clearButton_Click(object sender, EventArgs e)
		{
			ClearDisplay();
		}

		///////////////////////////////////////////////////////////////////////

		private void Test_IsWintabAvailable()
		{
			if (CWintabInfo.IsWintabAvailable())
			{
				TraceMsg("Wintab was found!\n");
			}
			else
			{
				TraceMsg("Wintab was not found!\nCheck to see if tablet driver service is running.\n");
			}
		}

		///////////////////////////////////////////////////////////////////////

		private void Test_GetDeviceInfo()
		{
			//TraceMsg("DeviceInfo: " + CWintabInfo.GetDeviceInfo() + "\n");
			string devInfo = CWintabInfo.GetDeviceInfo();
			TraceMsg("DeviceInfo: " + devInfo + "\n");
		}


		///////////////////////////////////////////////////////////////////////

		private void Test_GetDefaultDigitizingContext()
		{
			CWintabContext context = CWintabInfo.GetDefaultDigitizingContext();

			TraceMsg("Default Digitizing Context:\n");
			TraceMsg("\tSysOrgX, SysOrgY, SysExtX, SysExtY\t[" +
				context.SysOrgX + "," + context.SysOrgY + "," +
				context.SysExtX + "," + context.SysExtY + "]\n");

			TraceMsg("\tInOrgX, InOrgY, InExtX, InExtY\t[" +
				context.InOrgX + "," + context.InOrgY + "," +
				context.InExtX + "," + context.InExtY + "]\n");

			TraceMsg("\tOutOrgX, OutOrgY, OutExtX, OutExt\t[" +
				context.OutOrgX + "," + context.OutOrgY + "," +
				context.OutExtX + "," + context.OutExtY + "]\n");
		}

		///////////////////////////////////////////////////////////////////////

		private void Test_GetDefaultSystemContext()
		{
			CWintabContext context = CWintabInfo.GetDefaultSystemContext();

			TraceMsg("Default System Context:\n");
			TraceMsg("\tSysOrgX, SysOrgY, SysExtX, SysExtY\t[" +
				context.SysOrgX + "," + context.SysOrgY + "," +
				context.SysExtX + "," + context.SysExtY + "]\n");

			TraceMsg("\tInOrgX, InOrgY, InExtX, InExtY\t[" +
				context.InOrgX + "," + context.InOrgY + "," +
				context.InExtX + "," + context.InExtY + "]\n");

			TraceMsg("\tOutOrgX, OutOrgY, OutExtX, OutExt\t[" +
				context.OutOrgX + "," + context.OutOrgY + "," +
				context.OutExtX + "," + context.OutExtY + "]\n");
		}

		///////////////////////////////////////////////////////////////////////

		private void Test_GetDefaultDeviceIndex()
		{
			Int32 devIndex = CWintabInfo.GetDefaultDeviceIndex();

			TraceMsg("Default device index is: " + devIndex + (devIndex == -1 ? " (virtual device)\n" : "\n"));
		}

		///////////////////////////////////////////////////////////////////////

		private void Test_GetDeviceAxis()
		{
			WintabAxis axis;

			// Get virtual device axis for X, Y and Z.
			axis = CWintabInfo.GetDeviceAxis(-1, EAxisDimension.AXIS_X);

			TraceMsg("Device axis X for virtual device:\n");
			TraceMsg("\taxMin, axMax, axUnits, axResolution: " + axis.axMin + "," + axis.axMax + "," + axis.axUnits + "," + axis.axResolution.ToString() + "\n");

			axis = CWintabInfo.GetDeviceAxis(-1, EAxisDimension.AXIS_Y);
			TraceMsg("Device axis Y for virtual device:\n");
			TraceMsg("\taxMin, axMax, axUnits, axResolution: " + axis.axMin + "," + axis.axMax + "," + axis.axUnits + "," + axis.axResolution.ToString() + "\n");

			axis = CWintabInfo.GetDeviceAxis(-1, EAxisDimension.AXIS_Z);
			TraceMsg("Device axis Z for virtual device:\n");
			TraceMsg("\taxMin, axMax, axUnits, axResolution: " + axis.axMin + "," + axis.axMax + "," + axis.axUnits + "," + axis.axResolution.ToString() + "\n");
		}

		///////////////////////////////////////////////////////////////////////

		private void Test_GetDeviceOrientation()
		{
			bool tiltSupported = false;
			WintabAxisArray axisArray = CWintabInfo.GetDeviceOrientation(out tiltSupported);
			TraceMsg("Device orientation:\n");
			TraceMsg("\ttilt supported for current tablet: " + (tiltSupported ? "YES\n" : "NO\n"));

			if (tiltSupported)
			{
				for (int idx = 0; idx < axisArray.array.Length; idx++)
				{
					TraceMsg("\t[" + idx + "] axMin, axMax, axResolution, axUnits: " +
						axisArray.array[idx].axMin + "," +
						axisArray.array[idx].axMax + "," +
						axisArray.array[idx].axResolution + "," +
						axisArray.array[idx].axUnits + "\n");
				}
			}
		}

		///////////////////////////////////////////////////////////////////////

		private void Test_GetDeviceRotation()
		{
			bool rotationSupported = false;
			WintabAxisArray axisArray = CWintabInfo.GetDeviceRotation(out rotationSupported);
			TraceMsg("Device rotation:\n");
			TraceMsg("\trotation supported for current tablet: " + (rotationSupported ? "YES\n" : "NO\n"));

			if (rotationSupported)
			{
				for (int idx = 0; idx < axisArray.array.Length; idx++)
				{
					TraceMsg("\t[" + idx + "] axMin, axMax, axResolution, axUnits: " +
						axisArray.array[idx].axMin + "," +
						axisArray.array[idx].axMax + "," +
						axisArray.array[idx].axResolution + "," +
						axisArray.array[idx].axUnits + "\n");
				}
			}
		}

		///////////////////////////////////////////////////////////////////////

		private void Test_GetNumberOfDevices()
		{
			UInt32 numDevices = CWintabInfo.GetNumberOfDevices();
			TraceMsg("Number of tablets connected: " + numDevices + "\n");
		}


		///////////////////////////////////////////////////////////////////////

		private void Test_IsStylusActive()
		{
			bool isStylusActive = CWintabInfo.IsStylusActive();
			TraceMsg("Is stylus active: " + (isStylusActive ? "YES\n" : "NO\n"));
		}


		///////////////////////////////////////////////////////////////////////

		private void Test_GetStylusName()
		{
			TraceMsg("Stylus name (puck):   " + CWintabInfo.GetStylusName(EWTICursorNameIndex.CSR_NAME_PUCK) + "\n");
			TraceMsg("Stylus name (pen):    " + CWintabInfo.GetStylusName(EWTICursorNameIndex.CSR_NAME_PRESSURE_STYLUS) + "\n");
			TraceMsg("Stylus name (eraser): " + CWintabInfo.GetStylusName(EWTICursorNameIndex.CSR_NAME_ERASER) + "\n");
		}

		///////////////////////////////////////////////////////////////////////

		private void Test_GetExtensionMask()
		{
			TraceMsg("Extension touchring mask:   0x" + CWintabExtensions.GetWTExtensionMask(EWTXExtensionTag.WTX_TOUCHRING).ToString("x") + "\n");
			TraceMsg("Extension touchstring mask: 0x" + CWintabExtensions.GetWTExtensionMask(EWTXExtensionTag.WTX_TOUCHSTRIP).ToString("x") + "\n");
			TraceMsg("Extension express key mask: 0x" + CWintabExtensions.GetWTExtensionMask(EWTXExtensionTag.WTX_EXPKEYS2).ToString("x") + "\n");
		}

		///////////////////////////////////////////////////////////////////////

		private void Test_Context()
		{
			bool status = false;
			CWintabContext logContext = null;

			try
			{
				logContext = OpenTestDigitizerContext();
				if (logContext == null)
				{
					TraceMsg("Test_Context: FAILED OpenTestDigitizerContext - bailing out...\n");
					return;
				}

				status = logContext.Enable(true);
				TraceMsg("Context Enable: " + (status ? "PASSED" : "FAILED") + "\n");

				status = logContext.SetOverlapOrder(false);
				TraceMsg("Context SetOverlapOrder to bottom: " + (status ? "PASSED" : "FAILED") + "\n");
				status = logContext.SetOverlapOrder(true);
				TraceMsg("Context SetOverlapOrder to top: " + (status ? "PASSED" : "FAILED") + "\n");

				TraceMsg("Modified Context:\n");
				TraceMsg("  Name: " + logContext.Name + "\n");
				TraceMsg("  Options: " + logContext.Options + "\n");
				TraceMsg("  Status: " + logContext.Status + "\n");
				TraceMsg("  Locks: " + logContext.Locks + "\n");
				TraceMsg("  MsgBase: " + logContext.MsgBase + "\n");
				TraceMsg("  Device: " + logContext.Device + "\n");
				TraceMsg("  PktRate: 0x" + logContext.PktRate.ToString("x") + "\n");
				TraceMsg("  PktData: 0x" + ((uint)logContext.PktData).ToString("x") + "\n");
				TraceMsg("  PktMode: 0x" + ((uint)logContext.PktMode).ToString("x") + "\n");
				TraceMsg("  MoveMask: " + logContext.MoveMask + "\n");
				TraceMsg("  BZtnDnMask: 0x" + logContext.BtnDnMask.ToString("x") + "\n");
				TraceMsg("  BtnUpMask: 0x" + logContext.BtnUpMask.ToString("x") + "\n");
				TraceMsg("  InOrgX: " + logContext.InOrgX + "\n");
				TraceMsg("  InOrgY: " + logContext.InOrgY + "\n");
				TraceMsg("  InOrgZ: " + logContext.InOrgZ + "\n");
				TraceMsg("  InExtX: " + logContext.InExtX + "\n");
				TraceMsg("  InExtY: " + logContext.InExtY + "\n");
				TraceMsg("  InExtZ: " + logContext.InExtZ + "\n");
				TraceMsg("  OutOrgX: " + logContext.OutOrgX + "\n");
				TraceMsg("  OutOrgY: " + logContext.OutOrgY + "\n");
				TraceMsg("  OutOrgZ: " + logContext.OutOrgZ + "\n");
				TraceMsg("  OutExtX: " + logContext.OutExtX + "\n");
				TraceMsg("  OutExtY: " + logContext.OutExtY + "\n");
				TraceMsg("  OutExtZ: " + logContext.OutExtZ + "\n");
				TraceMsg("  SensX: " + logContext.SensX + "\n");
				TraceMsg("  SensY: " + logContext.SensY + "\n");
				TraceMsg("  SensZ: " + logContext.SensZ + "\n");
				TraceMsg("  SysMode: " + logContext.SysMode + "\n");
				TraceMsg("  SysOrgX: " + logContext.SysOrgX + "\n");
				TraceMsg("  SysOrgY: " + logContext.SysOrgY + "\n");
				TraceMsg("  SysExtX: " + logContext.SysExtX + "\n");
				TraceMsg("  SysExtY: " + logContext.SysExtY + "\n");
				TraceMsg("  SysSensX: " + logContext.SysSensX + "\n");
				TraceMsg("  SysSensY: " + logContext.SysSensY + "\n");
			}
			catch (Exception ex)
			{
				System.Windows.Forms.MessageBox.Show(ex.ToString());
			}
			finally
			{
				if (logContext != null)
				{
					status = logContext.Close();
					TraceMsg("Context Close: " + (status ? "PASSED" : "FAILED") + "\n");
				}
			}
		}

		///////////////////////////////////////////////////////////////////////

		private CWintabContext OpenTestDigitizerContext(
			int width_I = 0, int height_I = 0, bool ctrlSysCursor = true)
		{
			bool status = false;
			CWintabContext logContext = null;

			try
			{
				// Get the default digitizing context.
				// Default is to receive data events.
				logContext = CWintabInfo.GetDefaultDigitizingContext(ECTXOptionValues.CXO_MESSAGES);

				// Set system cursor if caller wants it.
				if (ctrlSysCursor)
				{
					logContext.Options |= (uint)ECTXOptionValues.CXO_SYSTEM;
				}

				if (logContext == null)
				{
					TraceMsg("FAILED to get default digitizing context.\n");
					return null;
				}

				// Modify the digitizing region.
				logContext.Name = "WintabDN Event Data Context";

				if (width_I != 0 && height_I != 0)
				{
					// output in a grid of the specified dimensions.
					logContext.OutOrgX = logContext.OutOrgY = 0;
					logContext.OutExtX = width_I;
					logContext.OutExtY = height_I;
				}

				// Open the context, which will also tell Wintab to send data packets.
				status = logContext.Open();

				TraceMsg("Context Open: " + (status ? "PASSED [ctx=" + logContext.HCtx + "]" : "FAILED") + "\n");
			}
			catch (Exception ex)
			{
				TraceMsg("OpenTestDigitizerContext ERROR: " + ex.ToString());
			}

			return logContext;
		}

		///////////////////////////////////////////////////////////////////////
		/// <summary>
		/// Opens a Wintab default system context
		/// </summary>
		/// <param name="ctrlSysCursor"></param>
		/// <returns></returns>

		private CWintabContext OpenTestSystemContext(bool ctrlSysCursor = true)
		{
			bool status = false;
			CWintabContext logContext = null;

			try
			{
				// Get the default system context.
				// Default is to receive data events.
				logContext = CWintabInfo.GetDefaultSystemContext(ECTXOptionValues.CXO_MESSAGES);

				// Set system cursor if caller wants it.
				if (ctrlSysCursor)
				{
					logContext.Options |= (uint)ECTXOptionValues.CXO_SYSTEM;
				}
				else
				{
					logContext.Options &= ~(uint)ECTXOptionValues.CXO_SYSTEM;
				}

				if (logContext == null)
				{
					TraceMsg("FAILED to get default wintab context.\n");
					return null;
				}

				// ----------------------------------------------------------------------
				// Modify the tablet extents to set what part of the tablet is used.
				Rectangle newTabletInRect = new Rectangle();
				Rectangle newTabletOutRect = new Rectangle();

				SetTabletExtents(ref logContext, newTabletInRect, newTabletOutRect);

				// ----------------------------------------------------------------------
				// Modify the system extents to control where cursor is allowed to move on desktop.
				Rectangle newScreenRect = new Rectangle();

				SetSystemExtents(ref logContext, newScreenRect);

				// Open the context, which will also tell Wintab to send data packets.
				status = logContext.Open();

				TraceMsg("Context Open: " + (status ? "PASSED [ctx=" + logContext.HCtx + "]" : "FAILED") + "\n");
			}
			catch (Exception ex)
			{
				TraceMsg("OpenTestDigitizerContext ERROR: " + ex.ToString());
			}

			return logContext;
		}

		///////////////////////////////////////////////////////////////////////

		private void Test_DataPacketQueueSize()
		{
			bool status = false;
			UInt32 numPackets = 0;
			CWintabContext logContext = null;

			try
			{
				logContext = OpenTestDigitizerContext();
				//logContext = OpenTestDigitizerContext(m_TABEXTX, m_TABEXTY);

				if (logContext == null)
				{
					TraceMsg("Test_DataPacketQueueSize: FAILED OpenTestDigitizerContext - bailing out...\n");
					return;
				}

				CWintabData wtData = new CWintabData(logContext);
				TraceMsg("Creating CWintabData object: " + (wtData != null ? "PASSED" : "FAILED") + "\n");
				if (wtData == null)
				{
					throw new Exception("Could not create CWintabData object.");
				}

				numPackets = wtData.GetPacketQueueSize();
				TraceMsg("Initial packet queue size: " + numPackets + "\n");

				status = wtData.SetPacketQueueSize(17);
				TraceMsg("Setting packet queue size: " + (status ? "PASSED" : "FAILED") + "\n");

				numPackets = wtData.GetPacketQueueSize();
				TraceMsg("Modified packet queue size: " + numPackets + "\n");
			}
			catch (Exception ex)
			{
				System.Windows.Forms.MessageBox.Show(ex.ToString());
			}
			finally
			{
				if (logContext != null)
				{
					status = logContext.Close();
					TraceMsg("Context Close: " + (status ? "PASSED" : "FAILED") + "\n");
				}
			}
		}

		///////////////////////////////////////////////////////////////////////

		private void Test_MaxPressure()
		{
			TraceMsg("Max normal pressure is: " + CWintabInfo.GetMaxPressure() + "\n");
			TraceMsg("Max tangential pressure is: " + CWintabInfo.GetMaxPressure(false) + "\n");
		}

		///////////////////////////////////////////////////////////////////////

		private void Test_GetDataPackets(UInt32 maxNumPkts_I)
		{
			// Set up to capture/display maxNumPkts_I packet at a time.
			m_maxPkts = maxNumPkts_I;

			// Open a context and try to capture pen data.
			InitSystemDataCapture();

			// Touch pen to the tablet.  You should see data appear in the TestForm window.
		}

		///////////////////////////////////////////////////////////////////////

		private void Test_QueryDataPackets()
		{
			QueryDataForm qdForm = new QueryDataForm();

			qdForm.ShowDialog();

		}

		///////////////////////////////////////////////////////////////////////

		private void Enable_Scribble(bool enable = false)
		{
			if (enable)
			{
				// Set up to capture 1 packet at a time.
				m_maxPkts = 1;

				// Init scribble graphics.
				//m_graphics = CreateGraphics();
				m_graphics = testSplitContainer.Panel2.CreateGraphics();
				m_graphics.SmoothingMode = SmoothingMode.AntiAlias;

				m_pen = new Pen(Color.Black);
				m_backPen = new Pen(Color.White);

				for (int idx = 0; idx < 10; idx++)
				{
					m_drawPens.Add(new Pen(Color.Black, idx + 1));
				}

				scribbleButton.BackColor = Color.Lime;
				scribbleLabel.Visible = true;
				testButton.BackColor = Color.WhiteSmoke;
				testLabel.Text = "Press Test... button to start testing.";

				// You should now be able to scribble in the scribble panel (Panel2).
			}
			else
			{
				// Remove scribble context.
				CloseCurrentContext();

				// Turn off graphics.
				if (m_graphics != null)
				{
					testSplitContainer.Panel2.Invalidate();
					m_graphics = null;
				}

				scribbleButton.BackColor = Color.WhiteSmoke;
				scribbleLabel.Visible = false;
				testButton.BackColor = Color.Lime;
				testLabel.Text = "Press Test button and hold pen on tablet to start testing.";
			}
		}

		///////////////////////////////////////////////////////////////////////
		// Helper functions
		//

		///////////////////////////////////////////////////////////////////////
		/// <summary>
		/// Cretes a Wintab data context using a default event handler.
		/// </summary>
		/// <param name="logContext_I"></param>

		private void CreateDataObject(CWintabContext logContext_I)
		{
			if (logContext_I == null)
			{
				throw new NullReferenceException("Oops - NULL wintab context when setting data handler");
			}

			// Create a data object and set its WT_PACKET handler.
			m_wtData = new CWintabData(m_logContext);
			m_wtData.SetWTPacketEventHandler(MyWTPacketEventHandler);
		}

		///////////////////////////////////////////////////////////////////////
		/// <summary>
		/// Opens a test system context for data capture
		/// </summary>
		/// <param name="ctrlSysCursor_I"></param>

		private void InitSystemDataCapture(bool ctrlSysCursor_I = true)
		{
			try
			{
				// Close context from any previous test.
				CloseCurrentContext();

				TraceMsg("Opening context...\n");

				m_logContext = OpenTestSystemContext(ctrlSysCursor_I);

				if (m_logContext == null)
				{
					TraceMsg("Test_DataPacketQueueSize: FAILED OpenTestSystemContext - bailing out...\n");
					return;
				}

				CreateDataObject(m_logContext);
			}
			catch (Exception ex)
			{
				System.Windows.Forms.MessageBox.Show(ex.ToString());
			}
		}

		///////////////////////////////////////////////////////////////////////

		private void CloseCurrentContext()
		{
			try
			{
				TraceMsg("Closing context...\n");
				if (m_wtData != null)
				{
					m_wtData.RemoveWTPacketEventHandler(MyWTPacketEventHandler);
					m_wtData = null;
				}
				if (m_logContext != null)
				{
					m_logContext.Close();
					m_logContext = null;
				}

			}
			catch (Exception ex)
			{
				System.Windows.Forms.MessageBox.Show(ex.ToString());
			}
		}

		///////////////////////////////////////////////////////////////////////

		void TraceMsg(string msg)
		{
			testTextBox.AppendText(msg + Environment.NewLine);

			// Scroll to bottom of list.
			testTextBox.SelectionLength = 0;
			testTextBox.SelectionStart = testTextBox.Text.Length;
			testTextBox.ScrollToCaret();
		}

		///////////////////////////////////////////////////////////////////////
		/// <summary>
		/// Sets logContext.In and LogContext.Out
		/// </summary>
		/// <param name="logContext">Wintab context being changed</param>
		/// <param name="newTabletInRect">New tablet input rectangle (width || height zero == no change)</param>
		/// <param name="newTabletOutRect">New tablet output rectangle (width || height zero == no change)</param>

		private void SetTabletExtents(ref CWintabContext logContext, Rectangle newTabletInRect, Rectangle newTabletOutRect)
		{
			if (logContext == null)
			{
				throw new NullReferenceException("Oops - null wintab context");
			}

			if (newTabletInRect.Width != 0 && newTabletInRect.Height != 0)
			{
				logContext.InOrgX = newTabletInRect.X;
				logContext.InOrgY = newTabletInRect.Y;
				logContext.InExtX = newTabletInRect.Width;
				logContext.InExtY = newTabletInRect.Height;
			}

			if (newTabletOutRect.Width != 0 && newTabletOutRect.Height != 0)
			{
				logContext.OutOrgX = newTabletOutRect.X;
				logContext.OutOrgY = newTabletOutRect.Y;
				logContext.OutExtX = newTabletOutRect.Width;
				logContext.OutExtY = newTabletOutRect.Height;
			}

			if (logContext.OutExtY > 0)
			{
				// In Wintab, the tablet origin is lower left.  Move origin to upper left
				// so that it coincides with screen origin.
				logContext.OutExtY = -logContext.OutExtY;
			}
		}

		///////////////////////////////////////////////////////////////////////
		/// <summary>
		/// Sets logContext.Out
		/// </summary>
		/// <param name="logContext">Wintab context being changed</param>
		/// <param name="newScreenRect">New screen rectangle (width || height zero == no change)</param>

		private void SetSystemExtents(ref CWintabContext logContext, Rectangle newScreenRect)
		{
			if (logContext == null)
			{
				throw new NullReferenceException("Oops - null wintab context");
			}

			if (newScreenRect.Width != 0 && newScreenRect.Height != 0)
			{
				logContext.SysOrgX = newScreenRect.X;
				logContext.SysOrgY = newScreenRect.Y;
				logContext.SysExtX = newScreenRect.Width;
				logContext.SysExtY = newScreenRect.Height;
			}
		}

		///////////////////////////////////////////////////////////////////////
		/// <summary>
		/// Called when Wintab WT_PACKET events are received.
		/// </summary>
		/// <param name="sender_I">The EventMessage object sending the report.</param>
		/// <param name="eventArgs_I">eventArgs_I.Message.WParam contains ID of packet containing the data.</param>

		public void MyWTPacketEventHandler(Object sender_I, MessageReceivedEventArgs eventArgs_I)
		{
			if (m_wtData == null)
			{
				return;
			}

			try
			{
				if (m_maxPkts == 1)
				{
					uint pktID = (uint)eventArgs_I.Message.WParam;
					WintabPacket pkt = m_wtData.GetDataPacket((uint)eventArgs_I.Message.LParam, pktID);

					if (pkt.pkContext != 0)
					{
						m_pkX = pkt.pkX;
						m_pkY = pkt.pkY;
						m_pressure = pkt.pkNormalPressure;

						//Trace.WriteLine("SCREEN: pkX: " + pkt.pkX + ", pkY:" + pkt.pkY + ", pressure: " + pkt.pkNormalPressure);

						m_pkTime = pkt.pkTime;

						if (m_graphics == null)
						{
							// display data mode
							TraceMsg("Received WT_PACKET event[" + pktID + "]: X/Y/P = " +
								pkt.pkX + " / " + pkt.pkY + " / " + pkt.pkNormalPressure + "\n");
						}
						else
						{
							Point clientPoint = testSplitContainer.Panel2.PointToClient(new Point(m_pkX, m_pkY));
							//Trace.WriteLine("CLIENT:   X: " + clientPoint.X + ", Y:" + clientPoint.Y);

							if (m_lastPoint.Equals(Point.Empty))
							{
								m_lastPoint = clientPoint;
								m_pkTimeLast = m_pkTime;
							}

							float width = (float)m_pressure / (float)m_maxPressure;
							int penIdx = (int)(width * 10) - 1; if (penIdx < 0) { penIdx = 0; }
							//Debug.WriteLine($"pressure: {m_pressure}; width:{m_pen.Width}; penIdx: {penIdx}");

							if (m_pressure > 0)
							{
								m_graphics.DrawLine(m_drawPens[penIdx], clientPoint, m_lastPoint);
							}

							m_lastPoint = clientPoint;
							m_pkTimeLast = m_pkTime;
						}
					}
				}
			}
			catch (Exception ex)
			{
				throw new Exception("FAILED to get packet data: " + ex.ToString());
			}
		}

		///////////////////////////////////////////////////////////////////////

		private void ClearDisplay()
		{
			testTextBox.Clear();
			testSplitContainer.Panel2.Invalidate();
		}

		///////////////////////////////////////////////////////////////////////

		private void testQDPButton_Click(object sender, EventArgs e)
		{
			Test_QueryDataPackets();
		}

		///////////////////////////////////////////////////////////////////////

		private void InitSystemDataCapture(object sender, EventArgs e)
		{
			if (m_graphics != null)
			{
				m_graphics.Dispose();
				m_graphics = testSplitContainer.Panel2.CreateGraphics();
				m_graphics.SmoothingMode = SmoothingMode.AntiAlias;

				Trace.WriteLine(
					"ScribblePanel: X:" + testSplitContainer.Panel2.Left + ",Y:" + testSplitContainer.Panel2.Top +
					", W:" + testSplitContainer.Panel2.Width + ", H:" + testSplitContainer.Panel2.Height);
			}
		}

		///////////////////////////////////////////////////////////////////////

		private void TestSplitContainer_Panel2_Resize(object sender, EventArgs e)
		{
			if (m_graphics != null)
			{
				m_graphics.Dispose();
				m_graphics = testSplitContainer.Panel2.CreateGraphics();
				m_graphics.SmoothingMode = SmoothingMode.AntiAlias;

				Trace.WriteLine(
					"ScribblePanel: X:" + testSplitContainer.Panel2.Left + ",Y:" + testSplitContainer.Panel2.Top +
					", W:" + testSplitContainer.Panel2.Width + ", H:" + testSplitContainer.Panel2.Height);
			}
		}

		///////////////////////////////////////////////////////////////////////
		/// <summary>
		/// Allows user to change tablet to system mapping.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>

		private void MappingButton_Click(object sender, EventArgs e)
		{
			if (m_logContext == null)
			{
				System.Windows.Forms.MessageBox.Show("Oops - You need to run Wintab tests or Scribble before you can use this button.");
				return;
			}

			PenTestApp.MappingForm mappingDlg = new PenTestApp.MappingForm();
			mappingDlg.Init(m_logContext);
			if (DialogResult.OK == mappingDlg.ShowDialog())
			{
				// Close existing context and create a new context with the changed extents.
				CWintabContext temp = mappingDlg.LogContext;
				Point inOrg = new Point(temp.InOrgX, temp.InOrgY);
				Size inExt = new Size(temp.InExtX, temp.InExtY);
				Point outOrg = new Point(temp.OutOrgX, temp.OutOrgY);
				Size outExt = new Size(temp.OutExtX, temp.OutExtY);
				Point sysOrg = new Point(temp.SysOrgX, temp.SysOrgY);
				Size sysExt = new Size(temp.SysExtX, temp.SysExtY);

				CloseCurrentContext();

				m_logContext = CWintabInfo.GetDefaultSystemContext(ECTXOptionValues.CXO_MESSAGES);

				if (m_logContext == null)
				{
					throw new NullReferenceException("Oops - FAILED to get default system context.\n");
				}

				SetTabletExtents(ref m_logContext, new Rectangle(inOrg, inExt), new Rectangle(outOrg, outExt));
				SetSystemExtents(ref m_logContext, new Rectangle(sysOrg, sysExt));

				if (m_logContext == null)
				{
					TraceMsg("Test_DataPacketQueueSize: FAILED OpenTestSystemContext - bailing out...\n");
					return;
				}

				CreateDataObject(m_logContext);

				m_logContext.Open();
			}
		}
	}
}
